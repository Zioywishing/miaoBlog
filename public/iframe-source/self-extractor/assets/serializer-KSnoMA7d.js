(function(){"use strict";var v=Object.defineProperty,z=t=>{throw TypeError(t)},P=(t,r,e)=>r in t?v(t,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[r]=e,C=(t,r,e)=>P(t,r+"",e),k=(t,r,e)=>r.has(t)||z("Cannot "+e),l=(t,r,e)=>(k(t,r,"read from private field"),e?e.call(t):r.get(t)),A=(t,r,e)=>r.has(t)?z("Cannot add the same private member more than once"):r instanceof WeakSet?r.add(t):r.set(t,e);function U(t,r){const e=r,n=new Uint8Array(e);let i=0;for(const a of t)n.set(a,i),i+=a.length;return n}const w=new WeakMap,o=t=>{if(t instanceof Uint8Array)return t.length;{if(w.has(t))return w.get(t);const r=t.reduce((e,n)=>e+o(n),0);return w.set(t,r),r}},p=(t,r)=>{r=r||1;const e=[];for(;t>0||r>0;)e.unshift(t&255),t=t>>8,r--;return new Uint8Array(e)};function m(t){const r=new ArrayBuffer(8);return new DataView(r).setFloat64(0,t,!0),new Uint8Array(Array.from(new Uint8Array(r)))}const d=()=>[{Constructor:Uint8Array,targetType:new Uint8Array([2]),serialize(t){return t.target}},{Constructor:"number",targetType:new Uint8Array([4]),serialize(t){return m(t.target)}},{Constructor:"boolean",targetType:new Uint8Array([5]),serialize(t){return new Uint8Array([t.target?1:0])}},{Constructor:"undefined",targetType:new Uint8Array([6]),serialize(){return new Uint8Array(0)}},{filter(t){return t===null},targetType:new Uint8Array([7]),serialize(){return new Uint8Array(0)}}],E=()=>{const t=new TextEncoder,r=e=>{const{keyBytes:n,valueType:i,value:a}=e,s=p(o(a));return[new Uint8Array([n.length,i.length,s.length]),n,i,s,a]};return[{Constructor:Object,targetType:new Uint8Array([0]),serialize(e){const n=[];for(const i in e.target){const a=t.encode(i),s=e.target[i],c=e.serializer.filterPlugin(s),g=c.targetType;if(!g)throw new Error("Unknown value type");const h=c.serialize({target:s,serializer:e.serializer})??new Uint8Array(0);n.push(r({keyBytes:a,valueType:g,value:h}))}return n}},{Constructor:Array,targetType:new Uint8Array([1]),serialize(e){const n={...e.target,l:e.target.length};return e.serializer.filterPlugin(n).serialize({target:n,serializer:e.serializer})}},{Constructor:"string",targetType:new Uint8Array([3]),serialize(e){return t.encode(e.target)}},...d()]},B=()=>{const t=new TextEncoder,r=e=>{const{keyBytes:n,valueType:i,value:a}=e,s=p(o(a));return[new Uint8Array([n.length,i.length,s.length]),n,i,s,a]};return[{Constructor:Object,targetType:new Uint8Array([0]),async serialize(e){const n=[];for(const i in e.target){const a=t.encode(i),s=e.target[i],c=e.serializer.filterPlugin(s),g=c.targetType;if(!g)throw new Error("Unknown value type");const h=await c.serialize({target:s,serializer:e.serializer})??new Uint8Array(0);n.push(r({keyBytes:a,valueType:g,value:h}))}return n}},{Constructor:Array,targetType:new Uint8Array([1]),async serialize(e){const n={...e.target,l:e.target.length};return await e.serializer.serialize(n)}},{Constructor:"string",targetType:new Uint8Array([3]),serialize(e){return t.encode(e.target)}},...d()]};var y,u;class x{constructor(r){A(this,y,[]),A(this,u,new Map),C(this,"serialize"),(r==null?void 0:r.sync)===!0?(E().forEach(e=>{this.registerPlugin(e)}),this.serialize=e=>{const n=this.filterPlugin(e);if(!n)throw new Error("Unknown value type");const i=n.serialize({target:e,serializer:this});return i instanceof Uint8Array?i:U(i.flat(1/0),o(i))}):(B().forEach(e=>{this.registerPlugin(e)}),this.serialize=async e=>{const n=this.filterPlugin(e);if(!n)throw new Error("Unknown value type");const i=n.serialize({target:e,serializer:this}),a=i instanceof Promise?await i:i;return a instanceof Uint8Array?a:U(a.flat(1/0),o(a))})}filterPlugin(r){if(l(this,u).has(r instanceof Object?r.constructor:typeof r))return l(this,u).get(r instanceof Object?r.constructor:typeof r);for(const e of l(this,y))if(e.filter(r))return e}registerPlugin(r){r.Constructor&&l(this,u).set(r.Constructor,r),r.filter&&l(this,y).unshift(r)}}y=new WeakMap,u=new WeakMap;const S=()=>{const t=new Uint8Array([192]),r=new Uint8Array([212,0,0]);return[{filter:e=>e===null,targetType:new Uint8Array(0),serialize:e=>t},{Constructor:"undefined",targetType:new Uint8Array(0),serialize:e=>r}]},j=()=>{const t=new TextEncoder;return{Constructor:"string",targetType:new Uint8Array(0),serialize:r=>{const e=t.encode(r.target),n=e.length<32?1:e.length<256?2:e.length<65536?3:5,i=new Uint8Array(n);let a=0;return e.length<32?i[a++]=e.length+160:e.length<256?(i[a++]=217,i[a++]=e.length):e.length<65536?(i[a++]=218,i[a++]=e.length>>8,i[a++]=e.length&255):(i[a++]=219,i[a++]=e.length>>24,i[a++]=e.length>>16&255,i[a++]=e.length>>8&255,i[a++]=e.length&255),[i,e]}}},O=()=>{const t=new DataView(new ArrayBuffer(4)),r=e=>(t.setFloat32(0,e),t.getFloat32(0)===e);return{Constructor:"number",targetType:new Uint8Array(0),serialize:e=>{const n=e.target,i=new Uint8Array(9),a=new DataView(i.buffer);let s=0;return n>>>0===n?n<32?i[s++]=n:n<256?(i[s++]=204,i[s++]=n):n<65536?(i[s++]=205,i[s++]=n>>8,i[s++]=n&255):(i[s++]=206,a.setUint32(s,n),s+=4):n>>0===n?n>=-32?i[s++]=256+n:n>=-128?(i[s++]=208,i[s++]=n+256):n>=-32768?(i[s++]=209,a.setInt16(s,n),s+=2):(i[s++]=210,a.setInt32(s,n),s+=4):r(n)?(i[s++]=202,a.setFloat32(s,n),s+=4):(i[s++]=203,a.setFloat64(s,n),s+=8),i.subarray(0,s)}}},_=()=>{const t=[new Uint8Array([194]),new Uint8Array([195])];return{Constructor:"boolean",targetType:new Uint8Array(0),serialize:r=>r.target?t[1]:t[0]}},F=()=>({Constructor:Array,targetType:new Uint8Array(0),serialize:t=>{const r=[],e=t.target.length;if(e<16)r.push(new Uint8Array([144+e]));else if(e<256){const n=new Uint8Array(3);n[0]=220,n[1]=e>>8,n[2]=e&255,r.push(n)}else if(e<65536){const n=new Uint8Array(5);n[0]=221,n[1]=e>>24,n[2]=e>>16&255,n[3]=e>>8&255,n[4]=e&255,r.push(n)}else throw new Error("Array length is too long");for(const n of t.target)r.push(t.serializer.filterPlugin(n).serialize({target:n,serializer:t.serializer}));return r}}),M=()=>({Constructor:Object,targetType:new Uint8Array(0),serialize:t=>{const r=[],e=Object.keys(t.target).length;e<16?r.push(new Uint8Array([128+e])):e<65535?r.push(new Uint8Array([222,e>>8,e&255])):r.push(new Uint8Array([223,e>>24,e>>16&255,e>>8&255,e&255]));for(const n in t.target){const i=t.target[n],a=t.serializer.filterPlugin(n).serialize({target:n,serializer:t.serializer}),s=t.serializer.filterPlugin(i).serialize({target:i,serializer:t.serializer});r.push(a),r.push(s)}return r}}),V=()=>({Constructor:Uint8Array,targetType:new Uint8Array(0),serialize:t=>{const r=t.target.length,e=new Uint8Array(r<256?2:r<65536?3:5);return r<256?(e[0]=196,e[1]=r):r<65536?(e[0]=197,e[1]=r>>8&255,e[2]=r&255):(e[0]=198,e[1]=r>>24&255,e[2]=r>>16&255,e[3]=r>>8&255,e[4]=r&255),[e,t.target]}}),W=()=>[S(),j(),O(),_(),F(),M(),V()].flat(),T=new x;W().forEach(t=>{T.registerPlugin(t)});let f;const D=new Uint8Array([112,88,33,64].reverse()),$=async()=>{if(f)return f;{const r=await(await fetch("../extractor_base.exe")).arrayBuffer();return f=new Uint8Array(r),f}},b=(t,r,e)=>{e=e||{},r=r||"";for(const n in t){const i=t[n];i instanceof Uint8Array?e[r+n]=i:b(i,`${r}${r.length===0?"./":"/"}${n}/`,e)}return e};self.onmessage=async t=>{const r=t.data,e=b(r),n=await T.serialize(e),i=await $(),a=await new Blob([i,D,n.buffer]).arrayBuffer();self.postMessage(a)}})();
