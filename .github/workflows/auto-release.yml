name: Auto Release

on:
  push:
    branches: [main]
    
jobs:
  build-and-release:
    runs-on: ubuntu-latest
    container:
      image: debian:12
    env:
      DOCKER_DEFAULT_PLATFORM: linux/amd64
    permissions:
      contents: write
    steps:
      - name: Install dependencies for Git and Node.js
        run: |
          apt-get update
          apt-get install -y git curl wget nodejs npm tar gzip unzip
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Configure Git safe directory
        run: git config --global --add safe.directory /__w/miaoBlog/miaoBlog
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          
      - name: Install Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          export PATH="$HOME/.bun/bin:$PATH"
          bun --version  # 测试 Bun 是否可用
      
      - name: Install dependencies
        run: |
          export PATH="$HOME/.bun/bin:$PATH"
          bun install
        
      - name: Build project
        run: |
          export PATH="$HOME/.bun/bin:$PATH"
          bun run build
        
      - name: Execute aftbuild script
        run: |
          export PATH="$HOME/.bun/bin:$PATH"
          bun run aftbuild
        
      - name: Get version from package.json
        id: package-version
        run: echo "VERSION=$(node -p \"require('./package.json').version || '0.1.0'\")" >> $GITHUB_ENV
        
      - name: Calculate build number
        id: build-number
        run: |
          BUILD_TAGS=$(git tag -l "v${{ env.VERSION }}.*")
          if [ -z "$BUILD_TAGS" ]; then
            echo "BUILD=1" >> $GITHUB_ENV
          else
            LATEST_BUILD=$(echo "$BUILD_TAGS" | sed 's/v${{ env.VERSION }}\.//' | sort -n | tail -1)
            BUILD=$((LATEST_BUILD + 1))
            echo "BUILD=$BUILD" >> $GITHUB_ENV
          fi
        
      - name: Create release version
        id: release-version
        run: echo "RELEASE_VERSION=v${{ env.VERSION }}.${{ env.BUILD }}" >> $GITHUB_ENV
        
      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            git log --pretty=format:"* %s (%h)" > CHANGELOG.md
          else
            git log ${PREVIOUS_TAG}..HEAD --pretty=format:"* %s (%h)" > CHANGELOG.md
          fi
          echo "CHANGELOG_PATH=CHANGELOG.md" >> $GITHUB_ENV
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: Release ${{ env.RELEASE_VERSION }}
          body_path: ${{ env.CHANGELOG_PATH }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            .output/output.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}